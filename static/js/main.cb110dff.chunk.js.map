{"version":3,"sources":["logo.svg","hooks/useTheme.js","features/todos/atoms.js","features/todos/selectors.js","hooks/useTodoList.js","pages/home/index.js","pages/home/Home.jsx","App.js","Root.jsx","serviceWorker.js","index.js"],"names":["module","exports","THEME","setTheme","isDark","theme","document","getElementsByTagName","className","window","localStorage","setItem","useTheme","useRef","getItem","toggle","useCallback","current","api","useMemo","TODO_LIST_FILTERS","todoListState","atom","key","default","todoListFilterState","filteredTodoListState","selector","get","filter","list","x","completed","createTodo","text","id","Math","round","random","Home","setTodoList","useSetRecoilState","setTodoFilterState","todoList","useRecoilValue","add","prev","length","remove","index","findIndex","slice","complete","showComplete","showIncomplete","showAll","useTodoList","todoListApi","useState","value","setValue","src","logo","alt","type","onClick","onChange","e","target","placeholder","map","title","App","Root","children","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb110dff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26ef1cbc.svg\";","import { useMemo, useRef, useCallback } from \"react\";\r\n\r\nconst THEME = \"dark-theme\";\r\n\r\nfunction setTheme(isDark = false) {\r\n    const theme = isDark ? THEME : \"\";\r\n    document.getElementsByTagName(\"html\")[0].className = theme;\r\n    window.localStorage.setItem(THEME, theme);\r\n    return isDark;\r\n}\r\n\r\nfunction getIsDark() {\r\n    return window.localStorage.getItem(THEME) === THEME;\r\n}\r\n\r\nexport default function useTheme() {\r\n    const isDark = useRef(setTheme(getIsDark()));\r\n\r\n    const toggle = useCallback(() => {\r\n        isDark.current = setTheme(!isDark.current);\r\n    }, []);\r\n\r\n    const api = useMemo(\r\n        () => ({\r\n            toggle,\r\n        }),\r\n        [toggle]\r\n    );\r\n\r\n    return [isDark.current, api];\r\n}\r\n","import { atom } from \"recoil\";\n\nconst TODO_LIST_KEY = \"todoListState\";\nconst TODO_LIST_FILTER_KEY = \"todoListFilterState\";\nconst TODO_LIST_FILTERS = [\"Show All\", \"Show Completed\", \"Show Incomplete\"];\n\nconst todoListState = atom({\n    key: TODO_LIST_KEY,\n    default: [],\n});\n\nconst todoListFilterState = atom({\n    key: TODO_LIST_FILTER_KEY,\n    default: TODO_LIST_FILTERS[0],\n});\n\nexport { todoListFilterState, todoListState, TODO_LIST_FILTERS };\n","import { selector } from \"recoil\";\n\nimport { TODO_LIST_FILTERS, todoListFilterState, todoListState } from \"./atoms\";\n\nconst TODO_SELECTOR_KEY = \"filteredTodoSelector\";\n\nconst filteredTodoListState = selector({\n    key: TODO_SELECTOR_KEY,\n    get: ({ get }) => {\n        const filter = get(todoListFilterState);\n        const list = get(todoListState);\n\n        switch (filter) {\n            case TODO_LIST_FILTERS[1]:\n                return list.filter((x) => x.completed);\n            case TODO_LIST_FILTERS[2]:\n                return list.filter((x) => !x.completed);\n            default:\n                return list;\n        }\n    },\n});\n\nexport { filteredTodoListState };\n","import { useMemo, useCallback } from \"react\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\n\nimport {\n    todoListState,\n    todoListFilterState,\n    TODO_LIST_FILTERS,\n} from \"../features/todos/atoms\";\nimport { filteredTodoListState } from \"../features/todos/selectors\";\n\nfunction createTodo(text) {\n    return { text, id: Math.round(Math.random() * 10000), completed: false };\n}\n\nexport default function useTodoList() {\n    const setTodoList = useSetRecoilState(todoListState);\n    const setTodoFilterState = useSetRecoilState(todoListFilterState);\n    const todoList = useRecoilValue(filteredTodoListState);\n\n    const add = useCallback(\n        (text) => {\n            setTodoList((prev) => [\n                ...prev,\n                createTodo(text, prev.length, prev),\n            ]);\n        },\n        [setTodoList]\n    );\n\n    const remove = useCallback(\n        (id) => {\n            setTodoList((prev) => {\n                const index = prev.findIndex((x) => x.id === id);\n                return [...prev.slice(0, index), ...prev.slice(index + 1)];\n            });\n        },\n        [setTodoList]\n    );\n\n    const complete = useCallback(\n        (id) => {\n            setTodoList((prev) => {\n                const index = prev.findIndex((x) => x.id === id);\n                return [\n                    ...prev.slice(0, index),\n                    { ...prev[index], completed: true },\n                    ...prev.slice(index + 1),\n                ];\n            });\n        },\n        [setTodoList]\n    );\n\n    const api = useMemo(\n        () => ({\n            add,\n            remove,\n            complete,\n            showComplete: () => setTodoFilterState(TODO_LIST_FILTERS[1]),\n            showIncomplete: () => setTodoFilterState(TODO_LIST_FILTERS[2]),\n            showAll: () => setTodoFilterState(TODO_LIST_FILTERS[0]),\n        }),\n        [setTodoFilterState, add, remove, complete]\n    );\n\n    return [todoList, api];\n}\n","import Home from \"./Home\";\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\n\r\nimport useTheme from \"../../hooks/useTheme\";\r\nimport useTodoList from \"../../hooks/useTodoList\";\r\nimport logo from \"../../logo.svg\";\r\n\r\nexport default function Home() {\r\n    const [, { toggle }] = useTheme();\r\n    const [todoList, todoListApi] = useTodoList();\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    function addTodo() {\r\n        if (value === \"\") {\r\n            return;\r\n        }\r\n\r\n        setValue(\"\");\r\n        todoListApi.add(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <p>\r\n                    Edit <code>src/App.js</code> and save to reload.\r\n                </p>\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn bg-purple-400\"\r\n                        onClick={toggle}\r\n                    >\r\n                        Toggle Theme\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <div className=\"App-content mt-10\">\r\n                <h2 className=\"text-purple-400\">TODO List</h2>\r\n                <div className=\"flex items-center justify-between my-5\">\r\n                    <span>Show:</span>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn todo-btn\"\r\n                        onClick={() => todoListApi.showAll()}\r\n                    >\r\n                        All\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn todo-btn text-green-500\"\r\n                        onClick={() => todoListApi.showComplete()}\r\n                    >\r\n                        Completed\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn todo-btn text-red-500\"\r\n                        onClick={() => todoListApi.showIncomplete()}\r\n                    >\r\n                        Incomplete\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex items-center justify-center flex-grow\">\r\n                    <input\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                        placeholder=\"Enter TODO\"\r\n                        className=\"text-black border border-black flex-grow p-1\"\r\n                    />\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn todo-btn bg-blue-700\"\r\n                        onClick={addTodo}\r\n                    >\r\n                        Add\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex flex-col\">\r\n                    {todoList.map((x) => (\r\n                        <p key={x.id} className=\"flex ml-2\">\r\n                            {!x.completed && (\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"mr-5 text-green-500\"\r\n                                    title=\"Complete\"\r\n                                    onClick={() => todoListApi.complete(x.id)}\r\n                                >\r\n                                    {\"\\u2713\"}\r\n                                </button>\r\n                            )}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"mr-5 text-red-500\"\r\n                                title=\"Remove\"\r\n                                onClick={() => todoListApi.remove(x.id)}\r\n                            >\r\n                                -\r\n                            </button>\r\n                            {x.text}\r\n                        </p>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\n\nimport Home from \"./pages/home\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return <Home />;\n}\n\nexport default App;\n","import React from \"react\";\nimport { RecoilRoot } from \"recoil\";\n\nexport default function Root({ children }) {\n    return <RecoilRoot>{children}</RecoilRoot>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport Root from \"./Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Root>\n            <App />\n        </Root>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}